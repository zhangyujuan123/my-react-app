{"version":3,"sources":["ShowTime.js","Todolist/Todoinput.js","Todolist/Todoing.js","Todolist/Todolist.js","index.js"],"names":["React","Component","TodoInput","handleInput","e","keyCode","props","add","target","value","handleChange","setState","name","parseInt","handkpleInput","bind","state","a","b","c","console","log","this","refs","focus","ref","onChange","onKeyDown","type","inp","onClick","Todoing","idx","del","todo","map","item","key","delItem","defaultProps","Todolist","addItem","data","splice","obj","o","Object","assign","keys","forEach","ReactDOM","render","document","getElementById","div","offsetLeft","wid","offsetWidth","setInterval","style","width"],"mappings":"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","file":"static/js/main.e3e9afec.chunk.js","sourcesContent":["import React,{Fragment} from 'react';\r\nclass ShowTime extends React.Component{\r\n    constructor(){\r\n        super();\r\n        this.state={\r\n            time:new Date().toLocaleString(),\r\n            a:100,\r\n            b:200\r\n        }\r\n        console.log('constructor');\r\n        setTimeout(()=>{\r\n            this.setState({\r\n                time:new Date().toLocaleString()\r\n            })\r\n        },1000)\r\n    }\r\n    shouldComponentUpdate(){\r\n        if(this.state.a>10){\r\n            return true;\r\n        }\r\n        return false;\r\n    }\r\n    \r\n    componentDidUpdate(preProps,preState,data){\r\n        console.log(\"didupdate\");\r\n        console.log(preProps,preState);\r\n    }\r\n    getSnapshotBeforeUpdate(){\r\n        console.log(\"getSnapshot\");\r\n        return {name:this.state.a}\r\n    }\r\n    componentDidMount(){\r\n        console.log('didmount');\r\n    }\r\n    render(){\r\n        console.log(\"render\");\r\n        var {name,age}=this.props;\r\n        return (\r\n            <Fragment>\r\n                {/* 条件渲染 */}\r\n                {name.length>5?<div>姓名:{name}</div>:''}\r\n                {name.length>5&&<div>姓名:{name}</div>}\r\n\r\n                <div>{this.state.time}</div>\r\n                <div>姓名：{name}</div>\r\n                {/* 循环渲染 */}\r\n                <div>\r\n                    {\r\n                        age.map((item,index)=>{\r\n                            if(index%2==0){\r\n                                return <p key={index}>{item}</p>\r\n                            }\r\n                        })\r\n                    }\r\n\r\n                </div>\r\n            </Fragment>\r\n        )\r\n    }\r\n}\r\n//默认导出：只能导出一次，被引入时可以重命名\r\nexport default ShowTime;\r\n\r\n\r\n\r\n//命名导出：可以导出多个，被引入时与导出的名一致\r\n// export {ShowTime};\r\n// export const num=1;\r\n","import React, { Component } from 'react'\r\n//受控组件：value值被react控制的表单元素\r\n//可以实时获取表单元素的值（表单验证）  写法相对麻烦\r\nexport default class TodoInput extends Component {\r\n    constructor(){\r\n        super();\r\n        this.handkpleInput=this.handleInput.bind(this);\r\n        this.state={\r\n            a:'',\r\n            b:'',\r\n            c:''\r\n        }\r\n    }\r\n    handleInput = (e)=>{\r\n        //绑定this，事件处理函数写成箭头函数，或者bind\r\n        if(e.keyCode===13){\r\n            this.props.add(e.target.value);\r\n        }\r\n    }\r\n    handleChange=(e)=>{\r\n        this.setState({\r\n            [e.target.name]:parseInt(e.target.value===''?0:e.target.value)\r\n        })\r\n    }\r\n    componentDidMount(){\r\n        console.log(this);\r\n        this.refs.a.focus();\r\n    }\r\n    render() {\r\n        return (\r\n            <div>\r\n                 <input ref='a' name=\"a\" onChange={this.handleChange} value={this.state.a} onKeyDown={this.handleInput} type=\"text\"/>\r\n                 +\r\n                 <input name=\"b\" onChange={this.handleChange} value={this.state.b} onKeyDown={this.handleInput} type=\"text\"/>\r\n                 +\r\n                 <input name=\"c\" onChange={this.handleChange} value={this.state.c} onKeyDown={this.handleInput} type=\"text\"/>\r\n                 =\r\n                 <p>{this.state.a+this.state.b+this.state.c}</p>\r\n                 {/* 非受控组件:一次性获取或处理表单元素的值 */}\r\n                 <input ref={(inp)=>{this.inp=inp}} type=\"text\"/>\r\n                 <button onClick={()=>{console.log(this.inp.value)}}>提交</button>\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\n//受控组件\r\n//1.","import React, { Component } from 'react'\r\nimport PropTypes from 'prop-types';\r\n\r\nexport default class Todoing extends Component {\r\n    delItem(idx,e){\r\n        console.log(e);\r\n        this.props.del(idx);\r\n    }\r\n    render() {\r\n        var {todo}=this.props;\r\n        return (\r\n            <ul>\r\n                {\r\n                    todo.map((item,idx)=><li key={idx}>{item}---<button onClick={this.delItem.bind(this,idx)}>删除</button></li>)\r\n                }\r\n            </ul>\r\n        )\r\n    }\r\n}\r\nTodoing.propTypes={\r\n    todo:PropTypes.array,\r\n    del:PropTypes.func\r\n}\r\nTodoing.defaultProps={\r\n    todo:[1,2,3,4,4]\r\n}\r\n","import React, { Component } from 'react'\r\nimport Todoinput from './Todoinput'\r\nimport Todoing from './Todoing'\r\n\r\nexport default class Todolist extends Component {\r\n    constructor(){\r\n        super();\r\n        this.state={\r\n            todo:[1,2,3]\r\n        }\r\n\r\n        //深拷贝\\浅拷贝\r\n        var obj={a:100,b:[1,2,3]};\r\n        var obj1={c:300};\r\n        // var o={...obj};\r\n        var o=Object.assign({},obj,obj1);   //浅拷贝\r\n        // var o=json.parse(JSON.stringify(obj));  //深拷贝\r\n        // o.b[0]=200;\r\n        console.log(o===obj);\r\n        Object.keys(obj).forEach((item)=>{    //Object.keys(obj) 返回的是对象的属性名构成的数组\r\n            console.log(item);\r\n            console.log(obj[item]);\r\n        })\r\n    }\r\n    addItem=(data)=>{\r\n\r\n\r\n        // this.state.todo.push(data);\r\n        // console.log(this.state.todo);\r\n        this.setState({\r\n            todo:[...this.state.todo,data]\r\n        })\r\n    }\r\n    delItem=(idx,e)=>{\r\n        //1.不能直接改变或处理state，通过setstate改变\r\n        let todo=[...this.state.todo];\r\n        todo.splice(idx,1);\r\n        //2.setState是异步执行\r\n        this.setState((state,props)=>{\r\n            console.log(state.todo);   //拿到的是前一个state的todo\r\n            return {\r\n                todo:todo\r\n            }\r\n        })\r\n        //在setstate里获取state可能会出错，不是你想要的值\r\n        //可以像上面那样，把第一个参数写成函数，解决此问题\r\n        // this.setState({\r\n        //     todo:todo\r\n        // }, () =>{\r\n        //     console.log(this.state.todo);\r\n        // })  //成功之后才会执行回调函数\r\n    }\r\n    render() {\r\n        return (\r\n            <div>\r\n                <Todoinput add={this.addItem}/>\r\n                <Todoing del={this.delItem} todo={this.state.todo}/>\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\n","import React,{Fragment} from 'react';\nimport ReactDOM from 'react-dom';\nimport ShowTime from './ShowTime';\n// import {ShowTime} from './ShowTime';\nimport './index.css';\nimport Todolist from './Todolist/Todolist';\n// import App from './App';\n// import * as serviceWorker from './serviceWorker';\n\n// function ShowTime(props){\n//     console.log(props); //props是只读\n//     return (<Fragment>\n//                 <div>{props.name}</div>\n//                 <div>\n//                     {new Date().toLocaleString()}\n//                 </div>\n//             </Fragment>)\n// }\n\n\n\n\n// class ShowTime extends React.Component{\n//     constructor(){\n//         super();\n//         this.state={\n//             time:new Date().toLocaleString(),\n//             a:100,\n//             b:200\n//         }\n//         console.log('constructor');\n//         setTimeout(()=>{\n//             this.setState({\n//                 time:new Date().toLocaleString()\n//             })\n//         },1000)\n//     }\n//     shouldComponentUpdate(){\n//         if(this.state.a>10){\n//             return true;\n//         }\n//         return false;\n//     }\n    \n//     componentDidUpdate(preProps,preState,data){\n//         console.log(\"didupdate\");\n//         console.log(preProps,preState);\n//     }\n//     getSnapshotBeforeUpdate(){\n//         console.log(\"getSnapshot\");\n//         return {name:this.state.a}\n//     }\n//     componentDidMount(){\n//         console.log('didmount');\n//     }\n//     render(){\n//         console.log(\"render\");\n//         var {name,age}=this.props;\n//         return (\n//             <Fragment>\n//                 {/* 条件渲染 */}\n//                 {name.length>5?<div>姓名:{name}</div>:''}\n//                 {name.length>5&&<div>姓名:{name}</div>}\n\n//                 <div>{this.state.time}</div>\n//                 <div>姓名：{name}</div>\n//                 {/* 循环渲染 */}\n//                 <div>\n//                     {\n//                         age.map((item,index)=>{\n//                             if(index%2==0){\n//                                 return <p key={index}>{item}</p>\n//                             }\n//                         })\n//                     }\n\n//                 </div>\n//             </Fragment>\n//         )\n//     }\n// }\n\n//组件交互\n//父组件---->子组件：调用子组件时添加属性，子组件通过props拿到传递的数据\n//子组件---->父组件：\n\n\nReactDOM.render(<Todolist />,document.getElementById('root'));\n\n\n// var num=[<p>1</p>,<p>2</p>,3,4,5];\n// ReactDOM.render(\n//     <ShowTime age={num} name=\"zhangsan\"/>,\n//     document.getElementById('root')\n// )\n\n\n\n\n\n\n\n\n\n\n\n//显示当前系统时间\n// function showTime(){\n//     var ele=<div>\n//                 <p>当前时间是：</p>\n//                 <div>{new Date().toLocaleString()}</div>\n//             </div>;\n//     ReactDOM.render(ele,document.querySelector('#root'));\n// }\n// showTime();\n// setInterval(showTime,1000);\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n//react技术栈\n\nvar str='react';\n//自己封装react函数\nvar obj={\n    type:'div',\n    props:{\n        id:\"box\",\n        class:'box',\n        children:['hello',\n            'react',\n            {\n                type:'h1',\n                props:{\n                    id:\"tit\",\n                    class:'tit',\n                    children:['title','react']\n                }\n            }\n            ]\n    }\n}\nfunction render(obj,container){\n    var {type,props}=obj;\n    //文档碎片\n    var fragment=document.createDocumentFragment();\n    var ele=document.createElement(type);\n    for(var item in props){\n        if(item==='class'){\n            ele.className=props[item];\n        }else if(item==='children'){\n            for(var i=0;i<props.children.length;i++){\n                \n                if(typeof props.children[i]==='object'){\n                    render(props.children[i],ele);\n                }else{\n                    //ele.innerHTML+=props.children[i];\n                    var txt=document.createTextNode(props.children[i]);\n                    ele.appendChild(txt);\n                }\n                \n            }\n        }else{\n            ele[item]=props[item];\n        }\n    }\n    fragment.appendChild(ele);\n    container.appendChild(fragment);\n}\n//render(obj,document.getElementById('root'));\n//页面渲染过程\n//请求HTML页面、浏览器HTML解析器解析html文件、生成DOM树\n//link引入css文件、css解析器解析css，生成css对象模型，CSSOM和DOM tree结合生成一个render tree\n\n\n//页面回流（重排reflow） ： DOM结构变化、内容变化、大小、位置的变化、显示的变化\n//页面重绘（repaint）：颜色的变化（背景色、字体颜色、边框颜色）\n//1.先用变量进行dom处理，最后一次渲染\n// console.time('time');\n// var div=document.getElementById('root');\n// var str='';\n// for(var i=0;i<1000;i++){\n//     str+='<p>'+i+'</p>';\n// }\n// div.innerHTML=str;\n// console.timeEnd('time');\n//2.对于样式的处理\nvar div=document.getElementById('root');\n// div.style.width='100px';\n// div.style.height='100px';\n// div.style.background='red';\n\n// div.className='active';\n//3.offsetLeft、offsetWidth等都会引起回流，要慎用\nconsole.log(div.offsetLeft);\nvar wid=div.offsetWidth;\nsetInterval(()=>{\n    wid+=1;\n    div.style.width=wid+'px';\n},100)\n\n//4.文档碎片（内存中的一个变量）\n\n\n\n\n//jsx语法\n//var ele=<h1 class=\"tit\">hello {str} <p>react</p></h1>;\n//编译\n// var ele=React.createElement('h1',{id:'tit',class:'title'},'hello',React.createElement('p',{id:'tit',class:'title'},'react'));\n// console.log(ele);\n// ReactDOM.render(ele, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\n// serviceWorker.unregister();\n"],"sourceRoot":""}